mydb = dbConnect(MySQL(), user='root', password='Biology512', dbname='sys', host='localhost')
library(RMySQL)
mydb = dbConnect(MySQL(), user='root', password='Biology512!', dbname='sys', host='localhost')
mydb = dbConnect(MySQL(), user='root', password='Biology512', dbname='sys', host='localhost', port = 3306)
mydb = dbConnect(MySQL(), user='root', password='Biology512', dbname='sys', host='localhost', port = 3306)
mydb = dbConnect(MySQL(), user='root', password='Biology512!', dbname='sys', host='localhost', port = 3306)
mydb = dbConnect(MySQL(), user='root', password='Biology512', dbname='sys', host='Mysql@localhost:3306')
mydb = dbConnect(MySQL(), user='root', password='Biology512', dbname='sys', host='localhost')
install.packages('dbConnect')
library(dbConnect)
mydb = dbConnect(MySQL(), user='root', password='Biology512', dbname='sys', host='localhost')
mydb = dbConnect(MySQL(), user='root', password='Biology512', dbname='sys', host='localhost')
dbListTables(connection)
dbListTables(connection)
mydb = dbConnect(MySQL(), user='root', password='Biology512', dbname='sys', host='localhost', port = 3306)
?dbConnect
dbDisconnect(connection)
dbDisconnect(connection)
dbDisconnect(connection)
mydb = dbConnect(MySQL(), user='root', password='Biology512', dbname='sys', host='localhost', port = 3306)
dbListTables(connection)
dbListTables(mydb)
dbGetQuery(mydb, 'SELECT * FROM testing')
courseCatalog <- dbGetQuery(mydb, 'SELECT * FROM course_catalog')
View(courseCatalog)
courseCatalog
dbDisconnect(connection)
dbDisconnect(mydb)
dbDisconnect(mydb)
mydb = dbConnect(MySQL(), user='root', password='Biology512', dbname='movie_ratings', host='localhost', port = 3306)
dbListTables(mydb)
movie_ratings <- dbGetQuery(mydb,
'select
concat(f.first_name, ' ', f.last_name) as "friend_name",
m.movie_name,
r.rating
from friends f
join ratings r on r.friend_id = f.friend_id
join movies m on r.movie_id = m.movie_id; ')
movie_ratings <- dbGetQuery(mydb,
'select' +
'concat(f.first_name, ' ', f.last_name) as "friend_name",' +
'm.movie_name,' +
'r.rating' +
'from friends f' +
'join ratings r on r.friend_id = f.friend_id' +
'join movies m on r.movie_id = m.movie_id; ');
movie_ratings <- dbGetQuery(mydb,
'select' +
'concat(f.first_name, ' ', f.last_name) as "friend_name",' +
'm.movie_name,' +
'r.rating' +
'from friends f' +
'join ratings r on r.friend_id = f.friend_id' +
'join movies m on r.movie_id = m.movie_id');
movie_ratings <- dbGetQuery(mydb,
'select' +
'concat(f.first_name, ' ', f.last_name) as "friend_name",' +
'm.movie_name,' +
'r.rating' +
'from friends f' +
'join ratings r on r.friend_id = f.friend_id' +
'join movies m on r.movie_id = m.movie_id' + );
movie_ratings <- dbGetQuery(mydb,
'select' +
'concat(f.first_name, ' ', f.last_name) as "friend_name",' +
'm.movie_name,' +
'r.rating' +
'from friends f' +
'join ratings r on r.friend_id = f.friend_id' +
'join movies m on r.movie_id = m.movie_id;'
movie_ratings <- dbGetQuery(mydb,
'select ' +
'concat(f.first_name, ' ', f.last_name) as "friend_name", ' +
'm.movie_name, ' +
'r.rating ' +
'from friends f ' +
'join ratings r on r.friend_id = f.friend_id ' +
'join movies m on r.movie_id = m.movie_id; ')
query <- 'select ' +
'concat(f.first_name, ' ', f.last_name) as "friend_name", ' +
'm.movie_name, ' +
'r.rating ' +
'from friends f ' +
'join ratings r on r.friend_id = f.friend_id ' +
'join movies m on r.movie_id = m.movie_id; '
query <- concat('select ' +
'concat(f.first_name, ' ', f.last_name) as "friend_name", ' +
'm.movie_name, ' +
'r.rating ' +
'from friends f ' +
'join ratings r on r.friend_id = f.friend_id ' +
'join movies m on r.movie_id = m.movie_id; ');
query <- 'select ' +
'concat(f.first_name, ' ', f.last_name) as "friend_name", ' +
'm.movie_name, ' +
'r.rating ' +
'from friends f ' +
'join ratings r on r.friend_id = f.friend_id ' +
'join movies m on r.movie_id = m.movie_id; ' ;
query <- 'select concat(f.first_name, ' ', f.last_name) as "friend_name", ' +
'm.movie_name, ' +
'r.rating ' +
'from friends f ' +
'join ratings r on r.friend_id = f.friend_id ' +
'join movies m on r.movie_id = m.movie_id; ' ;
query <- 'select concat(f.first_name, ' ', f.last_name) as "friend_name", ' +
'm.movie_name, ' +
'r.rating ' +
'from friends f ' +
'join ratings r on r.friend_id = f.friend_id ' +
'join movies m on r.movie_id = m.movie_id; ' ;
movie_ratings <- dbGetQuery(mydb,
'select ' +
'concat(f.first_name, ' ', f.last_name) as friend_name, ' +
'm.movie_name, ' +
'r.rating ' +
'from friends f ' +
'join ratings r on r.friend_id = f.friend_id ' +
'join movies m on r.movie_id = m.movie_id; ');
movie_ratings <- dbGetQuery(mydb,
'select ' +
'concat(f.first_name, ' ', f.last_name) as friend_name, ' +
'm.movie_name, ' +
'r.rating ' +
'from friends f ' +
'join ratings r on r.friend_id = f.friend_id ' +
'join movies m on r.movie_id = m.movie_id; ' + ')';
query <- 'select concat(f.first_name, ' ', f.last_name) as friend_name,'
query <- "select concat(f.first_name, ' ', f.last_name) as 'friend_name'"
query <- "select concat(f.first_name, ' ', f.last_name) as 'friend_name'" +
" m.movie_name, " +
"r.rating " +
"from friends f " +
"join ratings r on r.friend_id = f.friend_id " +
"join movies m on r.movie_id = m.movie_id; " ;
query <- "select concat(f.first_name, ' ', f.last_name) as 'friend_name'"
query <- "select concat(f.first_name, ' ', f.last_name) as 'friend_name'" + " m.movie_name, "
movie_ratings <- dbGetQuery(mydb, '
select
concat(f.first_name, ' ', f.last_name) as "friend_name",
m.movie_name,
r.rating
from friends f
join ratings r on r.friend_id = f.friend_id
join movies m on r.movie_id = m.movie_id;
')
movie_ratings <- dbGetQuery(mydb, '
select
concat(f.first_name, ' ', f.last_name) as "friend_name",
m.movie_name,
r.rating
from "friends" f
join "ratings" r on r.friend_id = f.friend_id
join "movies" m on r.movie_id = m.movie_id;
')
movie_ratings <- dbGetQuery(mydb, '
select
concat(f.first_name, ' ', f.last_name) as "friend_name",
m.movie_name,
r.rating
from ("friends") f
join ("ratings") r on r.friend_id = f.friend_id
join ("movies") m on r.movie_id = m.movie_id;
')
movie_ratings <- dbGetQuery(mydb, '
select
concat(f.first_name, ' ', f.last_name) as "friend_name",
m.movie_name,
r.rating
from ("friends") f
join ("ratings") r on r.friend_id == f.friend_id
join ("movies") m on r.movie_id == m.movie_id;
')
movie_ratings <- dbGetQuery(mydb, '
select
concat(f.first_name, ' ', f.last_name) as "friend_name",
m.movie_name,
r.rating
from ("friends") f
join ("ratings") r on r.friend_id = f.friend_id,
join ("movies") m on r.movie_id = m.movie_id;
')
movie_ratings <- dbGetQuery(mydb, '
select
concat(f.first_name, ' ', f.last_name) as "friend_name",
m.movie_name,
r.rating
from "friends" f
join "ratings" r on r.friend_id = f.friend_id,
join "movies" m on r.movie_id = m.movie_id;
')
getwd()
my_query <- paste(readLines('/Users/zdalexander/Desktop/movie_ratings_query.sql'), collapse='\n')
my_query
movie_ratings <- dbGetQuery(mydb, my_query)
View(movie_ratings)
movie_ratings
# install.packages('RMySQL')
# install.packages('dbConnect')
# install.packages('RCurl')
library(RCurl)
library(RMySQL)
library(dbConnect)
mydb = dbConnect(MySQL(), user='root', password='Biology512', dbname='movie_ratings', host='localhost', port = 3306)
my_query <- getURL('https://raw.githubusercontent.com/zachalexander/data607_cunysps/master/Homework2/movie_ratings_query.sql');
my_query <- paste(readLines(my_query), collapse='\n')
movie_ratings <- dbGetQuery(mydb, my_query)
movie_ratings
head(movie_ratings)
# uncomment for full data frame
# movie_ratings
movie_ratings <- dbGetQuery(mydb, my_query)
my_query <- fread('https://raw.githubusercontent.com/zachalexander/data607_cunysps/master/Homework2/movie_ratings_query.sql');
my_query <- 'https://raw.githubusercontent.com/zachalexander/data607_cunysps/master/Homework2/movie_ratings_query.sql';
my_query <- paste(readLines(my_query), collapse='\n')
mydb = dbConnect(MySQL(), user='root', password='Biology512', dbname='movie_ratings', host='localhost', port = 3306)
my_query <- 'https://raw.githubusercontent.com/zachalexander/data607_cunysps/master/Homework2/movie_ratings_query.sql';
my_query <- paste(readLines(my_query), collapse='\n')
my_query <- download.file('https://raw.githubusercontent.com/zachalexander/data607_cunysps/master/Homework2/movie_ratings_query.sql');
?download.file
my_query <- 'https://raw.githubusercontent.com/zachalexander/data607_cunysps/master/Homework2/movie_ratings_query.sql';
my_query <- readChar(my_query, nchar = file.info(my_query)$size)
my_query <- 'https://raw.githubusercontent.com/zachalexander/data607_cunysps/master/Homework2/movie_ratings_query.sql';
my_query <- paste(readChar(my_query, nchars = file.info(my_query).size()), collapse='\n')
my_query <- 'https://raw.githubusercontent.com/zachalexander/data607_cunysps/master/Homework2/movie_ratings_query.sql';
my_query <- paste(readChar(my_query, nchars = file.info(my_query)$size()), collapse='\n')
my_query <- 'https://raw.githubusercontent.com/zachalexander/data607_cunysps/master/Homework2/movie_ratings_query.sql';
my_query <- paste(readChar(my_query, nchars = file.info(my_query)$size, collapse='\n')
my_query <- 'https://raw.githubusercontent.com/zachalexander/data607_cunysps/master/Homework2/movie_ratings_query.sql';
my_query <- paste(readChar(my_query, nchars = file.info(my_query)$size), collapse='\n')
my_query <- 'https://raw.githubusercontent.com/zachalexander/data607_cunysps/master/Homework2/movie_ratings_query.sql';
my_query <- paste(readLines(my_query), collapse='\n')
my_query <- 'https://raw.githubusercontent.com/zachalexander/data607_cunysps/master/Homework2/movie_ratings_query.sql';
my_query <- paste(readLines(my_query), collapse='\n', warn = FALSE)
my_query <- 'https://raw.githubusercontent.com/zachalexander/data607_cunysps/master/Homework2/movie_ratings_query.sql';
my_query <- paste(readLines(my_query), collapse='\n')
movie_ratings <- dbGetQuery(mydb, my_query)
head(movie_ratings)
# uncomment for full data frame
# movie_ratings
# install.packages('RMySQL')
# install.packages('dbConnect')
# install.packages('RCurl')
library(RCurl)
library(RMySQL)
library(dbConnect)
mydb = dbConnect(MySQL(), user='root', password='Biology512', dbname='movie_ratings', host='localhost', port = 3306)
my_query <- 'https://raw.githubusercontent.com/zachalexander/data607_cunysps/master/Homework2/movie_ratings_query.sql';
my_query <- paste(readLines(my_query), collapse='\n')
movie_ratings <- dbGetQuery(mydb, my_query)
head(movie_ratings)
# uncomment for full data frame
# movie_ratings
dbDisconnect(mydb)
# install.packages('RMySQL')
# install.packages('dbConnect')
# install.packages('RCurl')
library(RCurl)
library(RMySQL)
library(dbConnect)
mydb = dbConnect(MySQL(), user='root', password='Biology512', dbname='movie_ratings', host='localhost', port = 3306)
my_query <- 'https://raw.githubusercontent.com/zachalexander/data607_cunysps/master/Homework2/movie_ratings_query.sql';
my_query <- paste(readLines(my_query), collapse='\n')
movie_ratings <- dbGetQuery(mydb, my_query)
head(movie_ratings)
# uncomment for full data frame
# movie_ratings
dbDisconnect(mydb)
View(movie_ratings)
# install.packages('RMySQL')
# install.packages('dbConnect')
# install.packages('RCurl')
library(RCurl)
library(RMySQL)
library(dbConnect)
mydb = dbConnect(MySQL(), user='root', password='Biology512', dbname='movie_ratings', host='localhost', port = 3306)
my_query <- 'https://raw.githubusercontent.com/zachalexander/data607_cunysps/master/Homework2/movie_ratings_query.sql';
my_query <- paste(readLines(my_query), collapse='\n')
movie_ratings <- dbGetQuery(mydb, my_query)
head(movie_ratings)
# uncomment for full data frame
# movie_ratings
dbDisconnect(mydb)
View(movie_ratings)
install.packages("openintro")
devtools::install_github("jbryer/DATA606")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
scores <- c(57, 66, 69, 71, 72, 73, 74, 77, 78, 78, 79, 79, 81, 81, 82, 83, 83, 88, 89, 94)
# Chunk 3
boxplot(scores)
# Chunk 4
library(openintro)
set.seed(7365)
sym = rnorm(1000, mean = 60, sd = 3)
uni = runif(1000, min = 0, max = 100)
rs = rgamma(1000, shape = 3, rate = 2)
par(mar=c(4, 3.6, 0, 0), las = 1, mgp = c(2.7, 0.7, 0),
mfrow = c(1,6),
cex.lab = 1.5, cex.axis = 1.5)
histPlot(sym, xlab = "(a)", ylab = "", col = COL[1], axes = FALSE)
axis(1, seq(50,70,10))
histPlot(uni, xlab = "(b)", ylab = "", col = COL[1], axes = FALSE)
axis(1, seq(0,100,50))
histPlot(rs, xlab = "(c)", ylab = "", col = COL[1], axes = FALSE)
axis(1, seq(0,6,2))
boxPlot(rs, xlab = "(1)", ylab = "", col = COL[1,3])
boxPlot(sym, xlab = "(2)", ylab = "", col = COL[1,3])
boxPlot(uni, xlab = "(3)", ylab = "", col = COL[1,3])
# Chunk 5
library(openintro)
data(heartTr)
# mosaic plot -------------------------------------------------------
par(mar = c(0, 0, 0, 0), las = 1, mgp = c(2.7, 0.9, 0))
mosaicplot(transplant ~ survived, data = heartTr,
main = "", xlab = "", ylab = "", color = COL[1],
cex.axis = 1.5)
# box plot ----------------------------------------------------------
par(mar = c(2, 4.8, 0, 0), las = 1, mgp = c(3.5, 0.7, 0),
cex.lab = 1.5, cex.axis = 1.5)
boxPlot(heartTr$survtime, fact = heartTr$transplant,
ylab = "Survival Time (days)", col = COL[1,2])
# Chunk 6
# randomization -----------------------------------------------------
diffs <- DATA606::inference(heartTr$survived, heartTr$transplant,
success = "dead", order = c("treatment","control"),
est = "proportion", type = "ht", method = "simulation",
nsim = 100, null = 0, alternative = "twosided", simdist = TRUE,
seed = 95632)
# Chunk 7
# plot randomization distribution -----------------------------------
par(mar = c(3.6, 2.2, 1, 1), las = 1, mgp = c(2.5, 0.7, 0),
cex.axis = 1.5, cex.lab = 1.5)
values  <- table(diffs)
plot(diffs, type = "n", xlim = c(-0.25, 0.25),
xlab = "simulated differences in proportions",
ylab = "", axes = FALSE, ylim = c(0, max(values)))
axis(1, at = seq(-0.25, 0.25, 0.05),
labels = c(-0.25, NA,-0.15, NA,-0.05, NA, 0.05, NA, 0.15, NA, 0.25))
for(i in 1:length(diffs)){
x   <- diffs[i]
rec <- sum(diffs == x)
points(rep(x, rec), 1:rec, pch = 20, cex = 0.8, col = COL[1])
}
View(heartTr)
table(heartTr$survived)
table(heartTr$survived ~ heartTr$transplant)
?table()
table(heartTr$survived, heartTr$transplant)
dead_control / total_control
# total number of patients in the treatment group
total_treatment <- 24 + 45
# total number of patients in the treatment group that died
dead_treatment <- 45
# total number of patients in the control group
total_control <- 4 + 30
# total number of patients in the control group that died
dead_control <- 30
dead_control / total_control
dead_treatment / total_treatment
dead_treatment / total_treatment
table(heartTr$survived)
# randomization -----------------------------------------------------
diffs <- DATA606::inference(heartTr$survived, heartTr$transplant,
success = "dead", order = c("treatment","control"),
est = "proportion", type = "ht", method = "simulation",
nsim = 100, null = 0, alternative = "twosided", simdist = TRUE,
seed = 95632)
# plot randomization distribution -----------------------------------
par(mar = c(3.6, 2.2, 1, 1), las = 1, mgp = c(2.5, 0.7, 0),
cex.axis = 1.5, cex.lab = 1.5)
values  <- table(diffs)
plot(diffs, type = "n", xlim = c(-0.25, 0.25),
xlab = "simulated differences in proportions",
ylab = "", axes = FALSE, ylim = c(0, max(values)))
axis(1, at = seq(-0.25, 0.25, 0.05),
labels = c(-0.25, NA,-0.15, NA,-0.05, NA, 0.05, NA, 0.15, NA, 0.25))
for(i in 1:length(diffs)){
x   <- diffs[i]
rec <- sum(diffs == x)
points(rep(x, rec), 1:rec, pch = 20, cex = 0.8, col = COL[1])
}
cd ..
getwd()
movie_ratings
# install.packages('RMySQL')
# install.packages('dbConnect')
# install.packages('RCurl')
library(RCurl)
library(RMySQL)
library(dbConnect)
mydb = dbConnect(MySQL(), user='root', password='Biology512', dbname='movie_ratings', host='localhost', port = 3306)
my_query <- 'https://raw.githubusercontent.com/zachalexander/data607_cunysps/master/Homework2/movie_ratings_query.sql';
my_query <- paste(readLines(my_query), collapse='\n')
movie_ratings <- dbGetQuery(mydb, my_query)
# Spiderman: Into the Spider-verse
# Lion King
# Black Panther
# Blackkklansman
# RGB
# If Beale Street Could Talk
movie_ratings
dbDisconnect(mydb)
# install.packages('RMySQL')
# install.packages('dbConnect')
# install.packages('RCurl')
library(RCurl)
library(RMySQL)
library(dbConnect)
mydb = dbConnect(MySQL(), user='root', password='Biology512', dbname='movie_ratings', host='localhost', port = 3306)
my_query <- 'https://raw.githubusercontent.com/zachalexander/data607_cunysps/master/Homework2/movie_ratings_query.sql';
my_query <- paste(readLines(my_query), collapse='\n')
movie_ratings <- dbGetQuery(mydb, my_query)
# Spiderman: Into the Spider-verse
# Lion King
# Black Panther
# Blackkklansman
# RGB
# If Beale Street Could Talk
movie_ratings
dbDisconnect(mydb)
# install.packages('RMySQL')
# install.packages('dbConnect')
# install.packages('RCurl')
library(RCurl)
library(RMySQL)
library(dbConnect)
# SQL password
sql_password <- 'Biology512'
mydb = dbConnect(MySQL(), user='root', password=sql_password, dbname='movie_ratings', host='localhost', port = 3306)
my_query <- 'https://raw.githubusercontent.com/zachalexander/data607_cunysps/master/Homework2/movie_ratings_query.sql';
my_query <- paste(readLines(my_query), collapse='\n')
movie_ratings <- dbGetQuery(mydb, my_query)
movie_ratings
dbDisconnect(mydb)
# install.packages('RMySQL')
# install.packages('dbConnect')
# install.packages('RCurl')
library(RCurl)
library(RMySQL)
library(dbConnect)
sql_password = 'Biology512'
mydb = dbConnect(MySQL(), user='root', password=sql_password, dbname='movie_ratings', host='localhost', port = 3306)
my_query <- 'https://raw.githubusercontent.com/zachalexander/data607_cunysps/master/Homework2/movie_ratings_query.sql';
my_query <- paste(readLines(my_query), collapse='\n')
movie_ratings <- dbGetQuery(mydb, my_query)
movie_ratings
dbDisconnect(mydb)
library(stringr)
raw.data <-"555-1239Moe Szyslak(636) 555-0113Burns, C. Montgomery555-6542Rev. Timothy Lovejoy555 8904Ned Flanders636-555-3226Simpson, Homer5553642Dr. Julius Hibbert"
name <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
phone <- unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?(-| )?\\d{3}(-| )?\\d{4}"))
# 1
## The following steps put the names into first_name last_name order, but also remove second names and titles
# remove the letter indicating the second name ("Burns, C. Mongomery" to "Burns, Montgomery")
name_2 <- unlist(str_replace(name, " \\w{1}\\.", ""))
# for names with commas, locate and flip from last, first to first last
name_3 <- unlist(str_replace(name_2, "(\\w+),\\s(\\w+)", "\\2 \\1"))
# remove titles
just_first_last_name <- unlist(str_replace(name_3, "\\w{1,}\\. ", ""))
## The following steps put the names into first_name last_name order, and include second names and titles in proper order
# locate name with a second name and a comma separating last and first, flip the order to first and last ("Burns, C. Montgomery" to "C. Montgomery Burns")
name_5 <- unlist(str_replace(name, "(\\w+),(\\s(\\w).\\s\\w+)", "\\2 \\1"))
# take this same character and flip the first and second parts so the second name is in the middle ("C. Montgomery Burns" to "Montgomery C. Burns")
name_6 <- unlist(str_replace(name_5, "(\\s\\w.\\s)(\\w+)", "\\2\\1"))
# locate name with a comma separating last and first, flip the order to first and last ("Simpson, Homer" to "Homer Simpson")
name_7 <- unlist(str_replace(name_6, "(\\w+),\\s(\\w+)", "\\2 \\1"))
# remove extra spaces between names
first_last_name_extra <- unlist(str_replace(name_7, "\\s{2}", " "))
# print out final string manipulations
#original vector of names
name
# name vector with just first_name and last_name
just_first_last_name
# name vector with first_name and last_name, but also includes second name and titles
first_last_name_extra
# 2
has_title <- unlist(str_detect(name, "(\\w+).\\s\\w+\\s\\w+"))
#3
has_second_name <- unlist(str_detect(name, "\\w+,\\s\\w.\\s\\w+"))
final_table <- data.frame(name, just_first_last_name, first_last_name_extra, has_title, has_second_name)
final_table
View(final_table)
library(stringr)
raw.data <-"555-1239Moe Szyslak(636) 555-0113Burns, C. Montgomery555-6542Rev. Timothy Lovejoy555 8904Ned Flanders636-555-3226Simpson, Homer5553642Dr. Julius Hibbert"
name <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
phone <- unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?(-| )?\\d{3}(-| )?\\d{4}"))
## The following steps put the names into first_name last_name order, but also remove second names and titles
# remove the letter indicating the second name ("Burns, C. Mongomery" to "Burns, Montgomery")
name_2 <- unlist(str_replace(name, " \\w{1}\\.", ""))
# for names with commas, locate and flip from last, first to first last
name_3 <- unlist(str_replace(name_2, "(\\w+),\\s(\\w+)", "\\2 \\1"))
# remove titles
just_first_last_name <- unlist(str_replace(name_3, "\\w{1,}\\. ", ""))
## The following steps put the names into first_name last_name order, and include second names and titles in proper order
# locate name with a second name and a comma separating last and first, flip the order to first and last ("Burns, C. Montgomery" to "C. Montgomery Burns")
name_5 <- unlist(str_replace(name, "(\\w+),(\\s(\\w).\\s\\w+)", "\\2 \\1"))
# take this same character and flip the first and second parts so the second name is in the middle ("C. Montgomery Burns" to "Montgomery C. Burns")
name_6 <- unlist(str_replace(name_5, "(\\s\\w.\\s)(\\w+)", "\\2\\1"))
# locate name with a comma separating last and first, flip the order to first and last ("Simpson, Homer" to "Homer Simpson")
name_7 <- unlist(str_replace(name_6, "(\\w+),\\s(\\w+)", "\\2 \\1"))
# remove extra spaces between names
first_last_name_extra <- unlist(str_replace(name_7, "\\s{2}", " "))
# print out final string manipulations
#original vector of names
name
# name vector with just first_name and last_name
just_first_last_name
# name vector with first_name and last_name, but also includes second name and titles
first_last_name_extra
